{"remainingRequest":"/Users/hiro/workspace/new_my_Trello/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hiro/workspace/new_my_Trello/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hiro/workspace/new_my_Trello/src/components/Board.vue","mtime":1591630899609},{"path":"/Users/hiro/workspace/new_my_Trello/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hiro/workspace/new_my_Trello/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hiro/workspace/new_my_Trello/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hiro/workspace/new_my_Trello/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgZHJhZ2dhYmxlIGZyb20gInZ1ZWRyYWdnYWJsZSINCmltcG9ydCBMaXN0QWRkIGZyb20gIi4vTGlzdEFkZC52dWUiOw0KaW1wb3J0IExpc3QgZnJvbSAiLi9MaXN0IjsNCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAidnVleCI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgY29tcG9uZW50czogew0KICAgIGRyYWdnYWJsZSwNCiAgICBMaXN0QWRkLA0KICAgIExpc3QNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICAuLi5tYXBTdGF0ZShbDQogICAgICAnbGlzdHMnLA0KICAgIF0pLA0KICAgIHRvdGFsQ2FyZENvdW50KCkgew0KICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudG90YWxDYXJkQ291bnQNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBtb3ZpbmdDYXJkOiBmdW5jdGlvbigpIHsNCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCd1cGRhdGVMaXN0JywgeyBsaXN0czogdGhpcy5saXN0cyB9KQ0KICAgIH0sDQogICAgbW92aW5nTGlzdDogZnVuY3Rpb24oKSB7DQogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgndXBkYXRlTGlzdCcsIHsgbGlzdHM6IHRoaXMubGlzdHMgfSkNCiAgICB9DQogIH0NCn07DQo="},{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <header>my Trello</header>\r\n    <main>\r\n      <p class=\"info-line\">All: {{ totalCardCount }} tasks</p>\r\n      <draggable :list=\"lists\"\r\n                  @end=\"movingList\"\r\n                  :animation=\"200\"\r\n                  class=\"list-index\">\r\n        <list v-for=\"(item, index) in lists\"\r\n            :key=\"item.id\"\r\n            :title=\"item.title\"\r\n            :cards=\"item.cards\"\r\n            :listIndex=\"index\"\r\n            @change=\"movingCard\"\r\n        />\r\n        <list-add/>\r\n      </draggable>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport draggable from \"vuedraggable\"\r\nimport ListAdd from \"./ListAdd.vue\";\r\nimport List from \"./List\";\r\nimport { mapState } from \"vuex\";\r\n\r\nexport default {\r\n  components: {\r\n    draggable,\r\n    ListAdd,\r\n    List\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'lists',\r\n    ]),\r\n    totalCardCount() {\r\n      return this.$store.getters.totalCardCount\r\n    }\r\n  },\r\n  methods: {\r\n    movingCard: function() {\r\n      this.$store.dispatch('updateList', { lists: this.lists })\r\n    },\r\n    movingList: function() {\r\n      this.$store.dispatch('updateList', { lists: this.lists })\r\n    }\r\n  }\r\n};\r\n</script>"]}]}